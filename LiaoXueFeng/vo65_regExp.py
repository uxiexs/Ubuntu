#!/usr/bin/python3
# coding:utf-8

#******************************************************************************
# re模块
# Python提供re模块，包含所有正则表达式的功能。由于Python的字符串本身也用\转义，所以要注意：
#
s = 'ABC\\-001'  # Python的字符串
# 对应的正则表达式字符串变成：
# 'ABC\-001'
# 因此我们强烈建议使用Python的r前缀，就不用考虑转义的问题了：
s = r'ABC\-001'  # Python的字符串
# 对应的正则表达式字符串不变：
# 'ABC\-001'

# 先看看如何判断正则表达式是否匹配：
import re
r1 = re.match(r'^\d{3}-\d{3,8}$', '010-12345')
r2 = re.match(r'^\d{3}-\d{3,8}$', '010 12345')
print(r1)
print(r2)

# match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。常见的判断方法：
test = '用户输入的字符串'
if re.match(r'正则表达式', test):
    print('ok')
else:
    print('failed')


def regExp(r, s):
    if re.match(r, s):
        return 'ok'
    else:
        return 'failed'
print(regExp(r=r'^\d{3,4}-\d{3,8}$', s='0731-52518072'))

#*************************************************************************
# 切分字符串
# 用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码：
#*************************************************************************
str1 = 'a b  c'
print(str1.split(' '))
# 无法识别连续的空格，用正则表达式试试：
print(re.split(r'\s+', str1))
# 无论多少个空格都可以正常分割:
print(re.split(r'[\s\;\,]+', 'a,b;; c  d'))

#*************************************************************************
# 分组
# 除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）。比如：
# ^(\d{3})-(\d{3,8})$分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：
#*************************************************************************
m = re.match(r'^(\d{3,4})-(\d{3,8})$', '0731-52518072')
print(m)
print(m.group(0))
print(m.group(1))
print(m.group(2))
# 如果正则表达式中定义了组，就可以在Match对象上用group()方法提取出子串来。
# 注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。
