#/usr/bin/python3
# coding:utf-8

#*************************************************************************
# 程序能一次写完并正常运行的概率很小，基本不超过1%。总会有各种各样的bug需要修正。有的bug很简单，看看错误信息就知道，有的bug很复杂，我们需要知道出错时，哪些变量的值是正确的，哪些变量的值是错误的，因此，需要一整套调试程序的手段来修复bug。
# 第一种方法简单直接粗暴有效，就是用print()把可能有问题的变量打印出来看看：
#*************************************************************************

# def foo(s):
#     n = int(s)
#     print('>>> n = %d' % n)
#     return 10 / n
#
# def main():
#     foo(0)

# main()
#*************************************************************************
# 用print()最大的坏处是将来还得删掉它，想想程序里到处都是print()，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。
# 断言
# 凡是用print()来辅助查看的地方，都可以用断言（assert）来替代：
# 程序中如果到处充斥着assert，和print()相比也好不到哪去。不过，启动Python解释器时可以用-O参数来关闭assert：
#*************************************************************************

# def foo1(s):
#     n = int(s)
#     assert n!=0,'n is zero!'
#     return 10/n
#
# def main1():
#     foo1('0')
# main1()

#*************************************************************************
# logging
# 把print()替换为logging是第3种方式，和assert比，logging不会抛出错误，而且可以输出到文件
#*************************************************************************
# import logging
# logging.basicConfig(level=logging.INFO)
# s = '0'
# n = int(s)
# logging.info('n = %d' % n)
# print(10 / n)

#*************************************************************************
# pdb
# 第4种方式是启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序：
#*************************************************************************
# s = '0'
# n = int(s)
# print(10 / n)

#*************************************************************************
# pdb.set_trace()
# 这个方法也是用pdb，但是不需要单步执行，我们只需要import pdb，然后，在可能出错的地方放一个pdb.set_trace()，就可以设置一个断点：
# 运行代码，程序会自动在pdb.set_trace()暂停并进入pdb调试环境，可以用命令p查看变量，或者用命令c继续运行：
#*************************************************************************
import pdb
s = '0'
n = int(s)
pdb.set_trace()  # 运行到这里会自动暂停
print(10 / n)

#******************************************************************************
# IDE
# 如果要比较爽地设置断点、单步执行，就需要一个支持调试功能的IDE。目前比较好的Python IDE有PyCharm
#******************************************************************************

#******************************************************************************
# 小结
# 写程序最痛苦的事情莫过于调试，程序往往会以你意想不到的流程来运行，你期待执行的语句其实根本没有执行，这时候，就需要调试了。
# 虽然用IDE调试起来比较方便，但是最后你会发现，logging才是终极武器。
#******************************************************************************
