#!/usr/bin/python3
# encoding: utf-8
"""
@version: 3.52
@author: Uxeix
@license: Apache Licence 
@contact: Uxeixs@gmail.com
@site: https://github.com/uxiexs
@software: PyCharm
@file: vo46_emumeration.py.py
@time: 2016/11/8 21:44
"""
#******************************************************************************************
# 为这样的枚举类型定义一个class类型，然后，每个常量都是class的一个唯一实例。Python提供了Enum类来实现这个功能：
#******************************************************************************************
from enum import Enum

Month = Enum('Month',('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'))
#********************************************************************************************
# 这样我们就获得了Month类型的枚举类，可以直接使用Month.Jan来引用一个常量，或者枚举它的所有成员：
#********************************************************************************************
for name, member in Month.__members__.items():
    print(name,'==>', member, member.value)
#********************************************************************************************
# value属性则是自动赋给成员的int常量，默认从1开始计数。
#********************************************************************************************

#********************************************************************************************
# 如果需要更精确地控制枚举类型，可以从Enum派生出自定义类：
# @unique装饰器可以帮助我们检查保证没有重复值
#********************************************************************************************
from enum import unique

@unique
class Weekday(Enum):
    Sun = 0
    Mon = 1
    Tue = 2
    Wed = 3
    Thu = 4
    Fri = 5
    Sat = 6

day1 = Weekday.Mon
# print(day1,day1.value)
# print(Weekday['Sun'],Weekday['Sun'].value)
for name, member in Weekday.__members__.items():
    print(name,'==>',member, member.value)
#*****************************************************************************************
# 可见，既可以用成员名称引用枚举常量，又可以直接根据value的值获得枚举常量。
#*****************************************************************************************