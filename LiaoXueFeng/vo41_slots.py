#/usr/bin/python3
# coding:utf-8

#***************************************************************************
# 正常情况下，当我们定义了一个class，创建了一个class的实例后，我们可以给该实例绑定任何属性  # 和方法，这就是动态语言的灵活性。先定义class：
#***************************************************************************


class Student(object):
    pass

s = Student()
s.name = 'Michal'  # 动态给实例绑定一个属性
print(s.name)

# 还可以尝试给实例绑定一个方法：


def set_age(self, age):
    self.age = age

from types import MethodType
s.set_age = MethodType(set_age, s)  # 给实例绑定一个方法
s.set_age(25)  # 调用实例方法
print(s.age)  # 测试结果

# 为了给所有实例都绑定方法，可以给class绑定方法：
Student.set_age = set_age

s2 = Student()
s2.set_age(28)
print(s2.age)

#*************************************************************************
# 通常情况下，上面的set_age方法可以直接定义在class中，但动态绑定允许我们在程序运行的过程   # 中动态给class加上功能，这在静态语言中很难实现。
#*************************************************************************

#*************************************************************************
# 使用__slots__
# Python允许在定义class的时候，定义一个特殊的__slots__变量，来限制该class实例能添加的属性
#*************************************************************************


class User(object):
    __slots__ = ('username', 'password')  # 用tuple定义允许绑定的属性名称

Lily = User()
Lily.username = 'Lily' #绑定属性
Lily.password = '870125paper'
Lily.age = 25

#******************************************************************************
# 由于'score'没有被放到__slots__中，所以不能绑定score属性，试图绑定score               # 将得到AttributeError的错误。
#******************************************************************************

#******************************************************************************
# 使用__slots__要注意，__slots__定义的属性仅对当前类实例起作用，对继承的子类是不起作用的
# 除非在子类中也定义__slots__，这样，子类实例允许定义的属性就是自身的__slots__加上        # 父类的__slots__。
#******************************************************************************
